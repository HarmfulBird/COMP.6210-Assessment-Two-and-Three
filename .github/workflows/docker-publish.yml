name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64/v8
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Setup Cloudflare WARP Action
        uses: oHTGo/setup-cloudflare-warp-action@master
        with:
          organization: fluffytech
          auth-client-id: ${{ secrets.AUTH_CLIENT_ID }}
          auth-client-secret: ${{ secrets.AUTH_CLIENT_SECRET }}

      - name: Ping Portainer
        run: |
          ping -c 4 ${{ secrets.PORTAINER_URL }}
          
      # Authenticate with Portainer API
      - name: Authenticate with Portainer
        run: |
          RESPONSE=$(curl -k -v -X POST "https://${{ secrets.PORTAINER_URL }}/api/auth" \
            -H "Content-Type: application/json" \
            --data "{\"username\": \"${{ secrets.USERNAME }}\", \"password\": \"${{ secrets.PASSWORD }}\"}")
          echo "$RESPONSE" > /tmp/portainer-token.json
          cat /tmp/portainer-token.json

      - name: Validate Token
        run: |
          TOKEN=$(cat /tmp/portainer-token.json | jq -r '.jwt')
          if [ -z "$TOKEN" ]; then
            echo "Error: Token is empty or invalid"
            exit 1
          else
            echo "Token: $TOKEN"
          fi

      - name: Redeploy Website Stack
        run: |
          TOKEN=$(cat /tmp/portainer-token.json | jq -r '.jwt')
          echo "Token: $TOKEN"
          RESPONSE=$(curl -s -X POST "https://${{ secrets.PORTAINER_URL }}/api/stacks/14/deploy" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json")
          echo "Redeploy Response: $RESPONSE"
